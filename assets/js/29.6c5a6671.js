(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{583:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器相关知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关知识"}},[t._v("#")]),t._v(" 浏览器相关知识")]),t._v(" "),a("h2",{attrs:{id:"浏览器工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[t._v("#")]),t._v(" 浏览器工作原理")]),t._v(" "),a("p",[t._v("对浏览器的实现者来说，他们做的事情，就是把一个 "),a("code",[t._v("URL")]),t._v(" 变成一个屏幕上显示的网页。")]),t._v(" "),a("p",[t._v("这个过程是这样的：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("浏览器首先使用 "),a("code",[t._v("HTTP")]),t._v(" 协议或者 "),a("code",[t._v("HTTPS")]),t._v(" 协议，向服务端请求页面；")])]),t._v(" "),a("li",[a("p",[t._v("把请求回来的 "),a("code",[t._v("HTML")]),t._v(" 代码经过解析，构建成 "),a("code",[t._v("DOM")]),t._v(" 树；")])]),t._v(" "),a("li",[a("p",[t._v("计算 "),a("code",[t._v("DOM")]),t._v(" 树上的 "),a("code",[t._v("CSS")]),t._v(" 属性；")])]),t._v(" "),a("li",[a("p",[t._v("最后根据 "),a("code",[t._v("CSS")]),t._v(" 属性对元素逐个进行渲染，得到内存中的位图；")])]),t._v(" "),a("li",[a("p",[t._v("一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；")])]),t._v(" "),a("li",[a("p",[t._v("合成之后，再绘制到界面上。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("TIP")]),a("p",[t._v("我们要清楚一个事情,从 "),a("code",[t._v("HTTP")]),t._v(" 请求回来开始，这个过程并非一般想象中的一步做完再做下一步，而是一条流水线。")]),t._v(" "),a("p",[t._v("从 "),a("code",[t._v("HTTP")]),t._v(" 请求回来，就产生了流式的数据，后续的 "),a("code",[t._v("DOM")]),t._v(" 树构建、"),a("code",[t._v("CSS")]),t._v(" "),a("code",[t._v("计算")]),t._v("、"),a("code",[t._v("渲染")]),t._v("、"),a("code",[t._v("合成")]),t._v("、"),a("code",[t._v("绘制")]),t._v("，都是尽可能地流式处理前一步的产出：即不需要等到上一步骤完全结束，就开始处理上一步的输出，这样我们在浏览网页时，才会看到逐步出现的页面。")])]),a("h3",{attrs:{id:"http-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-协议"}},[t._v("#")]),t._v(" "),a("code",[t._v("HTTP")]),t._v(" 协议")]),t._v(" "),a("p",[t._v("浏览器首先要做的事就是根据 "),a("code",[t._v("URL")]),t._v(" 把数据取回来，取回数据使用的是 "),a("code",[t._v("HTTP")]),t._v(" 协议，实际上这个过程之前还有 "),a("code",[t._v("DNS")]),t._v(" 查询，不过这里就不详细展开了,完整的相关阐述查看上文 "),a("code",[t._v("HTTP相关知识")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("HTTP")]),t._v(" 协议是基于 "),a("code",[t._v("TCP")]),t._v(" 协议出现的，对 "),a("code",[t._v("TCP")]),t._v(" 协议来说，"),a("code",[t._v("TCP")]),t._v(" 协议是一条双向的通讯通道，"),a("code",[t._v("HTTP")]),t._v(" 在 "),a("code",[t._v("TCP")]),t._v(" 的基础上，规定了 "),a("code",[t._v("Request-Response")]),t._v(" 的模式。这个模式决定了通讯必定是由浏览器端首先发起的。")]),t._v(" "),a("p",[t._v("大部分情况下，浏览器的实现者只需要用一个 "),a("code",[t._v("TCP")]),t._v(" 库，甚至一个现成的 "),a("code",[t._v("HTTP")]),t._v(" 库就可以搞定浏览器的网络通讯部分。"),a("code",[t._v("HTTP")]),t._v(" 是纯粹的文本协议，它是规定了使用 "),a("code",[t._v("TCP")]),t._v(" 协议来传输文本格式的一个应用层协议。")]),t._v(" "),a("h3",{attrs:{id:"http-协议格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-协议格式"}},[t._v("#")]),t._v(" "),a("code",[t._v("HTTP")]),t._v(" 协议格式")]),t._v(" "),a("p",[a("code",[t._v("HTTP")]),t._v(" 协议，大概可以划分成如下部分。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/base-js42.png",alt:"HTTP协议"}})]),t._v(" "),a("h3",{attrs:{id:"构建dom树方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树方式"}},[t._v("#")]),t._v(" 构建DOM树方式")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/base-js43.png",alt:"构建DOM树方式"}})]),t._v(" "),a("p",[a("strong",[t._v("解析代码")])]),t._v(" "),a("p",[t._v("HTML 的结构不算太复杂，我们日常开发需要的 90% 的“词”（指编译原理的术语 token，表示最小的有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA 节点几种。")]),t._v(" "),a("p",[a("strong",[t._v("1. 词（token）是如何被拆分的")])]),t._v(" "),a("p",[t._v("首先我们来看看一个非常标准的标签，会被如何拆分：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("text text text"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果我们从最小有意义单元的定义来拆分，第一个词（token）是什么呢？显然，作为一个词（token），整个 p 标签肯定是过大了（它甚至可以嵌套）。")]),t._v(" "),a("p",[t._v("那么，只用 p 标签的开头是不是合适吗？我们考虑到起始标签也是会包含属性的，最小的意义单元其实是"),a("code",[t._v("<p")]),t._v(",所有"),a("code",[t._v("<p")]),t._v("是第一个词。")]),t._v(" "),a("p",[t._v("我们继续拆分，可以把这段代码依次拆成词（token）：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("<p")]),t._v("“标签开始”的开始；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("class=“a”")]),t._v(" 属性；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(">")]),t._v(" “标签开始”的结束；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("text text text")]),t._v(" 文本；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("</p>")]),t._v("标签结束。")])])]),t._v(" "),a("p",[t._v("根据这样的分析，现在我们讲讲浏览器是如何用代码实现，我们设想，代码开始从 HTTP 协议收到的字符流读取字符。")]),t._v(" "),a("p",[t._v("在接受第一个字符之前，我们完全无法判断这是哪一个词（token），不过，随着我们接受的字符越来越多，拼出其他的内容可能性就越来越少。")]),t._v(" "),a("p",[t._v("比如，假设我们接受了一个字符“ < ” 我们一下子就知道这不是一个文本节点啦。")]),t._v(" "),a("p",[t._v("之后我们再读一个字符，比如就是 x，那么我们一下子就知道这不是注释和 CDATA 了，接下来我们就一直读，直到遇到“>”或者空格，这样就得到了一个完整的词（token）了。")]),t._v(" "),a("p",[t._v("实际上，我们每读入一个字符，其实都要做一次决策，而且这些决定是跟“当前状态”有关的。在这样的条件下，浏览器工程师要想实现把字符流解析成词（token），最常见的方案就是使用状态机。")]),t._v(" "),a("p",[a("strong",[t._v("2. 状态机")])]),t._v(" "),a("p",[t._v("绝大多数语言的词法部分都是用状态机实现的。那么我们来把部分词（token）的解析画成一个状态机看看：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201125210945882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hqbDI3MTMxNA==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("这里是一个简化版的状态机实现图,用来理解状态机运行机制已经够用了,完整版的可以参考"),a("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/parsing.html#tokenization",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML 官方文档"),a("OutboundLink")],1),t._v(",HTML 官方文档规定了 80 个状态。")])]),a("p",[t._v("状态机的初始状态，我们仅仅区分 “< ”和 “非 <”：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果获得的是一个非 < 字符，那么可以认为进入了一个文本节点；")])]),t._v(" "),a("li",[a("p",[t._v("如果获得的是一个 < 字符，那么进入一个标签状态。")])])]),t._v(" "),a("p",[t._v("不过当我们在标签状态时，则会面临着一些可能性。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("比如下一个字符是“ ! ” ，那么很可能是进入了注释节点或者 CDATA 节点。")])]),t._v(" "),a("li",[a("p",[t._v("如果下一个字符是 “/ ”，那么可以确定进入了一个结束标签。")])]),t._v(" "),a("li",[a("p",[t._v("如果下一个字符是字母，那么可以确定进入了一个开始标签。")])]),t._v(" "),a("li",[a("p",[t._v("如果我们要完整处理各种 HTML 标准中定义的东西，那么还要考虑“ ? ”“% ”等内容。")])])]),t._v(" "),a("p",[t._v("我们可以看到，用状态机做词法分析，其实正是把每个词的“特征字符”逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，形成一个联通图结构。")]),t._v(" "),a("p",[t._v("由于状态机设计属于"),a("code",[t._v("编译原理")]),t._v("的基本知识，这里我们仅作一个简要的介绍。")]),t._v(" "),a("p",[t._v("大致的思路就是,我们把每个函数当做一个状态，参数是接受的字符，返回值是下一个状态函数。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("data")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" characterReferenceInData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tagOpen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emitToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EOF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emitToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EOF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emitToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("tagOpenState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tagOpenState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" endTagOpenState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[A-Z]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StartTagToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tagNameState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-z]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StartTagToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tagNameState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bogusCommentState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dataState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//……")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br")])]),a("p",[t._v("这段代码给出了状态机的两个状态示例：data 即为初始状态，tagOpenState 是接受了一个“ < ” 字符，来判断标签类型的状态。")]),t._v(" "),a("p",[t._v("这里的状态机，每一个状态是一个函数，通过“if else”来区分下一个字符做状态迁移。这里所谓的状态迁移，就是当前状态函数返回下一个状态函数。")]),t._v(" "),a("p",[t._v("这样，我们的状态迁移代码非常的简单：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" char\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("这段代码的关键一句是“ state = state(char) ”，不论我们用何种方式来读取字符串流，我们都可以通过 state 来处理输入的字符流，这里用循环是一个示例，真实场景中，可能是来自 TCP 的输出流。")]),t._v(" "),a("p",[t._v("状态函数通过代码中的 emitToken 函数来输出解析好的 token（词），我们只需要覆盖 emitToken，即可指定对解析结果的处理方式。")]),t._v(" "),a("p",[t._v("词法分析器接受字符的方式很简单，就像下面这样：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HTMLLexicalParser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//状态函数们……")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tagOpen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("receiveInput")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("至此，我们就把字符流拆成了词（token）了。")]),t._v(" "),a("h2",{attrs:{id:"浏览器同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器同源策略"}},[t._v("#")]),t._v(" 浏览器同源策略")]),t._v(" "),a("p",[t._v("当浏览器访问 "),a("code",[t._v("URL")]),t._v(" 地址的协议（schema）/ 端口（port）/ 域名（host），三者中有任何一个与当前的 URL 片段信息不匹配的时候，就产生了跨域问题。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("当前地址")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("请求地址")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否跨域")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("http://www.juejin.com:80")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("https://www.juejin.com:80")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是(协议不同)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("http://www.juejin.com:80")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("http://www.juejin.cn:80")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是(域名不同)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("http://www.juejin.com:80")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("http://www.juejin.com:90")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是(端口不同)")])])])]),t._v(" "),a("h3",{attrs:{id:"跨域的说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域的说明"}},[t._v("#")]),t._v(" 跨域的说明")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("跨域，是浏览器提供的一种保护手段，服务端是不存在跨域这一说的。这也就是为什么现在前后端分离的开发模式下，前端比较依赖 "),a("code",[t._v("webpack-dev-server")]),t._v(" 启动代理服务来中转和代理后台接口的原因，因为两个服务器之间相互通信是没有跨域障碍的。")])]),t._v(" "),a("li",[a("p",[t._v("跨域，是对于 "),a("code",[t._v("XMLHttpRequest")]),t._v(" 来说的，"),a("strong",[t._v("浏览器获取不同源服务器下的静态资源，是没有跨域限制的")]),t._v("，这也是 "),a("code",[t._v("JSONP")]),t._v(" 跨域请求得以实现的本质。")])]),t._v(" "),a("li",[a("p",[t._v("不同于 "),a("code",[t._v("XMLHttpRequest")]),t._v(" 的是，通过 "),a("code",[t._v("src")]),t._v(" 属性加载的脚本资源，浏览器限制了 "),a("code",[t._v("Javascript")]),t._v(" 的权限，使其不能读写、返回内容。")])]),t._v(" "),a("li",[a("p",[t._v("对于浏览器来说，除了 "),a("code",[t._v("DOM")]),t._v(" 、"),a("code",[t._v("Cookie")]),t._v("、"),a("code",[t._v("XMLHttpRequest")]),t._v(" 会收到同源策略限制以外，一些常见的插件，比如 "),a("code",[t._v("Flash")]),t._v("、"),a("code",[t._v("Java Applet")]),t._v(" 、"),a("code",[t._v("Silverlight")]),t._v("、"),a("code",[t._v("Google Gears")]),t._v(" 等也都有自己的控制策略。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("当浏览器向不同域的服务器发送请求时，请求是真能发出去，对方服务端也是真能接收到请求，并且真能给你的浏览器响应，浏览器也真能接收到有效数据。")]),t._v(" "),a("p",[t._v("但是，如果在"),a("code",[t._v("跨域")]),t._v("的情况下、服务端返回数据的响应头里的 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 字段，没有把当前域名列进白名单，那么浏览器会把服务端返回的数据给藏起来，不告诉你，然后给你抛个 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 的错误。")])]),a("h3",{attrs:{id:"为什么资源文件不受同源策略限制呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么资源文件不受同源策略限制呢"}},[t._v("#")]),t._v(" "),a("strong",[t._v("为什么资源文件不受同源策略限制呢？")])]),t._v(" "),a("p",[t._v("假如说资源文件也被限制跨域，那么现在大量使用的 "),a("code",[t._v("CDN 缓存策略")]),t._v("基本就没办法用了。而且现在很多网站的资源文件，都会放到云服务器的 "),a("code",[t._v("OSS")]),t._v(" 上，"),a("code",[t._v("OSS")]),t._v(" 资源对应的 "),a("code",[t._v("url")]),t._v(" 地址肯定是不同域的，那这些资源也不能使用了。")]),t._v(" "),a("h3",{attrs:{id:"access-control-allow-origin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-origin"}},[t._v("#")]),t._v(" Access-Control-Allow-Origin")]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 标识了服务器允许的跨域白名单，它有以下几种设置方法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("直接设置 "),a("code",[t._v("*")]),t._v(" 通配符，简单粗暴，但是这么做等于把服务器的所有接口资源对外完全暴露，是不安全的。")])]),t._v(" "),a("li",[a("p",[t._v("设置指定域，比如 "),a("code",[t._v("Access-Control-Allow-Origin: https://www.baidu.com")]),t._v(" ，这样只会允许指定域的请求进行跨域访问。")])]),t._v(" "),a("li",[a("p",[t._v("由后端动态设置。"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 限制只能写一个白名单，但是当我们有多个域都需要跨域请求怎么呢？这个时候，这时可以由服务端自己维护一套白名单列表，在请求进来的时候对请求的源 "),a("code",[t._v("host")]),t._v(" 进行白名单比对，如果在白名单中，就将这个 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 动态设置上去，然后返回响应。")])])]),t._v(" "),a("h3",{attrs:{id:"cors-的预请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-的预请求"}},[t._v("#")]),t._v(" CORS 的预请求")]),t._v(" "),a("p",[t._v("如果我们像上面一样，只设置了 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 白名单，是否就可以完全畅通无阻地进行跨域了呢？并不是。\n就算对端开启了域名白名单认证，然鹅有一些操作仍然是需要进一步认证的，这种进一步的认证操作，就是 "),a("code",[t._v("CORS")]),t._v(" 预请求。")]),t._v(" "),a("h3",{attrs:{id:"预请求触发过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预请求触发过程"}},[t._v("#")]),t._v(" 预请求触发过程")]),t._v(" "),a("p",[t._v("浏览器预请求的触发条件，是判断本次请求是否属于一个简单请求。")]),t._v(" "),a("p",[t._v("如果本次请求属于一个复杂请求，那么在发送正式的跨域请求之前，浏览器会先准备一个名为 "),a("code",[t._v("OPTIONS")]),t._v(" 的 "),a("code",[t._v("HTTP Method")]),t._v(" ，作为预请求发送。")]),t._v(" "),a("p",[t._v("在服务器通过预请求后，下面浏览器才会发生正式的数据请求。整个请求过程其实是发生了两次请求："),a("code",[t._v("一个预检请求")]),t._v("，以及后续的实际数据请求。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("当我们使用原生的 fetch 去请求时,当发生跨域时，fetch 会先发送一个"),a("code",[t._v("OPTIONS")]),t._v("请求，来确认服务器是否允许接受请求。")]),t._v(" "),a("p",[t._v("服务器同意后，才会发送真正的请求。")])]),a("h3",{attrs:{id:"简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("请求方式只能是 "),a("code",[t._v("GET")]),t._v("、"),a("code",[t._v("POST")]),t._v("、"),a("code",[t._v("HEAD")])])]),t._v(" "),a("li",[a("p",[t._v("请求头字段只允许：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Accept")])]),t._v(" "),a("li",[a("code",[t._v("Accept-Language")])]),t._v(" "),a("li",[a("code",[t._v("Content-Language")])]),t._v(" "),a("li",[a("code",[t._v("Content-Type")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Content-Type")]),t._v(" 的值仅限于：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("text/plain")])]),t._v(" "),a("li",[a("code",[t._v("multipart/form-data")])]),t._v(" "),a("li",[a("code",[t._v("application/x-www-form-urlencoded")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("XMLHttpRequestUpload")]),t._v(" 对象均没有注册任何事件监听器（了解就好）。")])]),t._v(" "),a("li",[a("p",[t._v("请求中没有使用 "),a("code",[t._v("ReadableStream")]),t._v(" 对象（了解就好）。")])])]),t._v(" "),a("h3",{attrs:{id:"复杂请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂请求"}},[t._v("#")]),t._v(" 复杂请求")]),t._v(" "),a("p",[t._v("除了简单请求里定义的，都是复杂请求，统统需要预请求。")]),t._v(" "),a("h3",{attrs:{id:"预请求的验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预请求的验证"}},[t._v("#")]),t._v(" 预请求的验证")]),t._v(" "),a("p",[t._v("那么怎样使预检请求成功认证呢？还是需要服务端继续帮忙设置请求头的白名单：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Access-Control-Allow-Headers")]),t._v("，设置允许的额外请求头字段。")]),t._v(" "),a("li",[a("code",[t._v("Access-Control-Allow-Methods")]),t._v("，设置允许的额外请求方法。")]),t._v(" "),a("li",[a("code",[t._v("Access-Control-Max-Age")]),t._v(" （单位/秒），指定了预请求的结果能够被缓存多久，在这个时间范围内，再次发送跨域请求不会被预检。")])]),t._v(" "),a("h3",{attrs:{id:"http-响应首部字段说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-响应首部字段说明"}},[t._v("#")]),t._v(" HTTP 响应首部字段说明")]),t._v(" "),a("p",[t._v("这里列出了部分的响应字段:")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-allow-origin-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-origin-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(":")])])]),t._v(" "),a("p",[t._v("响应首部中可以携带一个 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 字段，其语法如下:")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Allow-Origin: <origin> | \\*")])])]),t._v(" "),a("p",[t._v("其中，"),a("code",[t._v("origin")]),t._v(" 参数的值指定了允许访问该资源的外域 "),a("code",[t._v("URI")]),t._v("。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。")]),t._v(" "),a("p",[t._v("例如，下面的字段值将允许来自 "),a("code",[t._v("http://mozilla.com")]),t._v(" 的请求：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Allow-Origin: http://mozilla.com")])])]),t._v(" "),a("p",[t._v("如果服务端指定了具体的域名而非"),a("code",[t._v("*")]),t._v("，那么响应首部中的 "),a("code",[t._v("Vary")]),t._v(" 字段的值必须包含 "),a("code",[t._v("Origin")]),t._v("。这将告诉客户端：服务器对不同的源站返回不同的内容。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-expose-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-expose-headers"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Expose-Headers")])])])]),t._v(" "),a("p",[t._v("在跨源访问时，"),a("code",[t._v("XMLHttpRequest")]),t._v("对象的"),a("code",[t._v("getResponseHeader()")]),t._v("方法只能拿到一些最基本的响应头，"),a("code",[t._v("Cache-Control")]),t._v("、"),a("code",[t._v("Content-Language")]),t._v("、"),a("code",[t._v("Content-Type")]),t._v("、"),a("code",[t._v("Expires")]),t._v("、"),a("code",[t._v("Last-Modified")]),t._v("、"),a("code",[t._v("Pragma")]),t._v("，如果要访问其他头，则需要服务器设置本响应头。")]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Expose-Headers")]),t._v(" 头让服务器把允许浏览器访问的头放入白名单，例如：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header")])])]),t._v(" "),a("p",[t._v("这样浏览器就能够通过"),a("code",[t._v("getResponseHeader")]),t._v("访问"),a("code",[t._v("X-My-Custom-Header")]),t._v("和 "),a("code",[t._v("X-Another-Custom-Header")]),t._v(" 响应头了。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-max-age"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-max-age"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Max-Age")])])])]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Max-Age")]),t._v(" 头指定了 "),a("code",[t._v("preflight")]),t._v(" 请求的结果能够被缓存多久。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Max-Age: <delta-seconds>")])])]),t._v(" "),a("p",[a("code",[t._v("delta-seconds")]),t._v(" 参数表示 "),a("code",[t._v("preflight")]),t._v(" 请求的结果在多少秒内有效。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-allow-credentials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-credentials"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Allow-Credentials")])])])]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(" 头指定了当浏览器的"),a("code",[t._v("credentials")]),t._v("设置为"),a("code",[t._v("true")]),t._v("时是否允许浏览器读取"),a("code",[t._v("response")]),t._v("的内容。")]),t._v(" "),a("p",[t._v("当用在对 "),a("code",[t._v("preflight")]),t._v(" 预检测请求的响应中时，它指定了实际的请求是否可以使用 "),a("code",[t._v("credentials")]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("请注意：简单 "),a("code",[t._v("GET")]),t._v(" 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。")])]),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Allow-Credentials: true")])])]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-allow-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-methods"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Allow-Methods")])])])]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Allow-Methods")]),t._v(" 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 "),a("code",[t._v("HTTP")]),t._v(" 方法。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Allow-Methods: <method>[, <method>]*")])])]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-allow-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-headers"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Allow-Headers")])])])]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Allow-Headers")]),t._v(" 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Allow-Headers: <field-name>[, <field-name>]*")])])]),t._v(" "),a("h3",{attrs:{id:"http-请求首部字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求首部字段"}},[t._v("#")]),t._v(" HTTP 请求首部字段")]),t._v(" "),a("p",[t._v("这里罗列了部分可用于发起跨源请求的首部字段。请注意，这些首部字段无须手动设置。 当开发者使用 "),a("code",[t._v("XMLHttpRequest")]),t._v(" 对象发起跨源请求时，它们已经被设置就绪。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"origin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#origin"}},[t._v("#")]),t._v(" "),a("code",[t._v("Origin")])])])]),t._v(" "),a("p",[a("code",[t._v("Origin")]),t._v(" 首部字段表明预检请求或实际请求的源站。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Origin: <origin>")])])]),t._v(" "),a("p",[a("code",[t._v("origin")]),t._v(" 参数的值为源站 "),a("code",[t._v("URI")]),t._v("。它不包含任何路径信息，只是服务器名称。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("有时候将该字段的值设置为空字符串是有用的，例如，当源站是一个 "),a("code",[t._v("data URL")]),t._v(" 时。")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("注意，在所有访问"),a("code",[t._v("控制请求（Access control request）")]),t._v("中，"),a("code",[t._v("Origin")]),t._v(" 首部字段总是被发送。")])]),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-request-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-request-method"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Request-Method")])])])]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Request-Method")]),t._v(" 首部字段用于预检请求。其作用是，将实际请求所使用的 "),a("code",[t._v("HTTP")]),t._v(" 方法告诉服务器。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Request-Method: <method>")])])]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"access-control-request-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-control-request-headers"}},[t._v("#")]),t._v(" "),a("code",[t._v("Access-Control-Request-Headers")])])])]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Request-Headers")]),t._v(" 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Request-Headers: <field-name>[, <field-name>]*")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("更加完整的跨域信息可以"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击这里查看更多"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);